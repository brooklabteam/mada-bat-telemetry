## SET WD
homedir <- "/Users/sophiahorigan/Documents/GitHub/bat-disease-metapop/Models/WIP"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/sophiahorigan/Documents/GitHub/bat-disease-metapop/Models/WIP/"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/shorigan/Documents/GitHub/bat-disease-metapop/Models/WIP/"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/shorigan/Documents/GitHub/Bat-disease-metapop/bat-disease-metapop/Models/WIP/"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## LOAD DATA
points.df <- read.csv(paste0(homedir,"Input/Eidolon_roosts.csv"), header = TRUE)
#--------------------------------------------------------------------------------------------
## LOAD DATA
eidolon_roosts.df <- read.csv(paste0(homedir,"Input/Eidolon_roosts.csv"), header = TRUE)
#--------------------------------------------------------------------------------------------
## CLEAN DATA
summary(eidolon_roosts.df)
View(eidolon_roosts.df)
rm(list=ls())
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/shorigan/Documents/GitHub/Bat-disease-metapop/bat-disease-metapop/Models/WIP/"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## LOAD DATA
eidolon_roosts.df <- read.csv(paste0(homedir,"Input/Eidolon_roosts.csv"), header = TRUE)
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- eidolon_roosts.df[!is.na(eidolon_roosts.df$location.lat) & !is.na(eidolon_roosts.df$location.long),]
View(eidolon_roosts.df)
rm(list=ls())
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/shorigan/Documents/GitHub/Bat-disease-metapop/bat-disease-metapop/Models/WIP/"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## LOAD DATA
eidolon_roosts.df <- read.csv(paste0(homedir,"Input/Eidolon_roosts.csv"), header = TRUE)
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- eidolon_roosts.df[!is.na(eidolon_roosts.df$location.lat) & !is.na(eidolon_roosts.df$location.long),]
rm(list=ls())
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/shorigan/Documents/GitHub/Bat-disease-metapop/bat-disease-metapop/Models/WIP/"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## LOAD DATA
eidolon_roosts.df <- read.csv(paste0(homedir,"Input/Eidolon_roosts.csv"), header = TRUE)
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- eidolon_roosts.df[!is.na(eidolon_roosts.df$location.lat) & !is.na(eidolon_roosts.df$location.long),]
# Subset to relevant columns only
points.sp <- points.df[, c("Roost.ID", "location.long", "location.lat", "Province")]
View(points.sp)
# Turn into a spatial points dataframe (class: SpatialPointsDataFrame)
coordinates(points.sp) <- c("location.long", "location.lat")
# Examine the structure of our SpatialPointsDataFrame
str(points.sp)
# Set coordinate system & projection
crs_wgs84 <- CRS(SRS_string = "EPSG:4326") # WGS 84 has EPSG code 4326
class(crs_wgs84)
slot(points.sp, "proj4string") <- crs_wgs84
plot(points.sp, col = as.factor(points.sp@data$Roost.ID), pch = 16)
plot(points.sp, col = as.factor(points.sp@data$Province), pch = 16)
## Satellite imagery
register_google(key = "AIzaSyCwa0OOmg7nRXgOrBZgBxgvmdn1h_bIO7g")
library(lubridate)
library(sp)
library(ggmap)
library(adehabitatHR)
library(scales)
library(maptools)
library(ggplot2)
library(ggmap)
library(dplyr)
library(amt)
## Satellite imagery
register_google(key = "AIzaSyCwa0OOmg7nRXgOrBZgBxgvmdn1h_bIO7g")
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 6, maptype = 'satellite')
ggmap(mybasemap)
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(id = points.sp.geo@data$individual.local.identifier, # add individual identifier
points.sp.geo@coords) # Add coordinates
# Transform the point object (points.sp)
points.sp.geo <- spTransform(points.sp, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs "))
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(id = points.sp.geo@data$Roost.ID, # add individual identifier
points.sp.geo@coords) # Add coordinates
View(points.geo)
View(points.geo)
View(points.sp.geo)
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(id = points.sp.geo@data$Roost.ID, # add individual identifier
points.sp.geo@coords, # Add coordinates
region = points.sp.geo@data$Province) # add region
# Plot imagery + points + paths
mymap.paths <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(region)), size = 1) +
geom_path(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(region))) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.paths + labs(linetype='Bat ID')
# Plot imagery + points + paths
mymap.paths <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(region)), size = 1) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.paths + labs(linetype='Bat ID')
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 5, maptype = 'satellite')
ggmap(mybasemap)
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(id = points.sp.geo@data$Roost.ID, # add individual identifier
points.sp.geo@coords, # Add coordinates
region = points.sp.geo@data$Province) # add region
# Plot imagery + points + paths
mymap.paths <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(region)), size = 1) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.paths + labs(linetype='Bat ID')
# Plot imagery + points + paths
mymap.paths <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(region)), size = 2) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
# Plot imagery + points + paths
mymap.roosts <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(region)), size = 2) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.roosts
# Plot imagery + points + paths
mymap.roosts <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(region)), size = 1.5) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.roosts
# Plot imagery + points + paths
mymap.roosts <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = region), size = 1.5) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.roosts
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(id = points.sp.geo@data$Roost.ID, # add individual identifier
points.sp.geo@coords, # Add coordinates
Region = points.sp.geo@data$Province) # add region
# Plot imagery + points + paths
mymap.roosts <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = region), size = 1.5) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.roosts
# Plot imagery + points + paths
mymap.roosts <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = Region), size = 1.5) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.roosts
install.packages("geosphere")
library(geosphere)
library(geosphere)
View(points.sp)
View(points.df)
View(points.sp)
View(points.geo)
#--------------------------------------------------------------------------------------------
## AVERAGE DISTANCE BETWEEN ROOSTS
points.xy <- points.df[, c("location.long", "location.lat")]
View(points.xy)
# all
point.mat <- matrix(points.xy)
View(point.mat)
point.mat
# all
point.mat <- data.matrix(points.xy)
point.mat
# all
point.mat <- matrix(c(points.xy$location.long, points.xy$location.lat), ncol = nrow(points.xy))
point.mat
# all
point.mat <- matrix(c(points.xy$location.long, points.xy$location.lat))
# all
point.mat <- matrix(c(points.xy$location.long, points.xy$location.lat), ncol = nrow(points.xy))
# all
point.mat <- matrix(c(points.xy$location.long, points.xy$location.lat), ncol = 2)
geospatial_dist <- distm(point.mat, fun = distGeo)
print(geospatial_dist)
# haversine distance
haversine_dist <- distHaversine(point.mat)
print(haversine_dist)
mean(geospatial_dist)
mean(haversine_dist)
View(geospatial_dist)
antananarivo.xy <- points.df[points.df$Province == 'Antananarivo', c("location.long", "location.lat")]
View(antananarivo.xy)
antananarivo.mat <- matrix(c(antananarivo.xy$location.long, antananarivo.xy$location.lat), ncol = 2)
### BY REGION
antananarivo.xy <- points.df[points.df$Province == 'Antananarivo', c("location.long", "location.lat")]
antananarivo.mat <- matrix(c(antananarivo.xy$location.long, antananarivo.xy$location.lat), ncol = 2)
geospatial_dist_antananarivo <- distm(antananarivo.mat, fun = distGeo)
print(geospatial_dist_antananarivo)
mean(geospatial_dist_antananarivo)
# Antsiranana
antsiranana.xy <- points.df[points.df$Province == 'Antsiranana', c("location.long", "location.lat")]
antsiranana.mat <- matrix(c(antsiranana.xy$location.long,antsiranana.xy$location.lat), ncol = 2)
geospatial_dist_antsiranana <- distm(antsiranana.mat, fun = distGeo)
print(geospatial_dist_antsiranana)
mean(geospatial_dist_antsiranana)
# Fianarantsoa
fianarantsoa.xy <- points.df[points.df$Province == 'Fianarantsoa', c("location.long", "location.lat")]
fianarantsoa.mat <- matrix(c(fianarantsoa.xy$location.long, fianarantsoa.xy$location.lat), ncol = 2)
geospatial_dist_fianarantsoa <- distm(fianarantsoa.mat, fun = distGeo)
print(geospatial_dist_fianarantsoa)
mean(geospatial_dist_fianarantsoa)
# Mahajunga
mahajunga.xy <- points.df[points.df$Province == 'Mahajunga', c("location.long", "location.lat")]
mahajunga.mat <- matrix(c(mahajunga.xy$location.long, mahajunga.xy$location.lat), ncol = 2)
geospatial_dist_mahajunga <- distm(mahajunga.mat, fun = distGeo)
print(geospatial_dist_mahajunga)
mean(geospatial_dist_mahajunga)
# Toamasina
toamasina.xy <- points.df[points.df$Province == 'Toamasina', c("location.long", "location.lat")]
toamasina.mat <- matrix(c(toamasina.xy$location.long, toamasina.xy$location.lat), ncol = 2)
geospatial_dist_toamasina <- distm(toamasina.mat, fun = distGeo)
print(geospatial_dist_toamasina)
mean(geospatial_dist_toamasina)
# Toliara
toliara.xy <- points.df[points.df$Province == 'Toliara', c("location.long", "location.lat")]
toliara.mat <- matrix(c(toliara.xy$location.long, toliara.xy$location.lat), ncol = 2)
geospatial_dist_toliara <- distm(toliara.mat, fun = distGeo)
print(geospatial_dist_toliara)
mean(geospatial_dist_toliara)
# average between all provinces
all.prov <- c(mean(geospatial_dist_antananarivo), mean(geospatial_dist_antsiranana), mean(geospatial_dist_fianarantsoa), mean(geospatial_dist_mahajunga), mean(geospatial_dist_toamasina), mean(geospatial_dist_toliara))
print(mean(all.prov))
# This script takes in MoveBank telemetry downloads, cleans and preps, then generates figures
rm(list=ls())
library(lubridate)
library(sp)
library(ggmap)
library(adehabitatHR)
library(scales)
library(maptools)
library(ggplot2)
library(ggmap)
library(dplyr)
library(amt)
library(geosphere)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/sophiahorigan/Documents/GitHub/mada-bat-telemetry/RCode"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/shorigan/Documents/GitHub/mada-bat-telemetry/RCode"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## LOAD DATA
points.df <- read.csv(paste0(homedir,"/input/Movebank-AllTags-AllSensorTypes-06182024.csv"), header = TRUE)
#--------------------------------------------------------------------------------------------
## LOAD DATA
points.df <- read.csv(paste0(homedir,"/input/Movebank-AllTags-AllSensorTypes-06182024.csv"), header = TRUE)
i
# cleanup
# convert timestamp column
points.df$timestamp <- ymd_hms(points.df$timestamp)
# change time zone to Madagascar
points.df$timestamp <- with_tz(points.df$timestamp, "Africa/Addis_Ababa")
# add site column
points.df <- points.df %>%
mutate(site = case_when(grepl("MAN", individual.local.identifier) ~ 'Ambositra - P',
grepl("ANA", individual.local.identifier) ~ 'Analambotaka - P',
grepl("TSI", individual.local.identifier) ~ 'Marotsipohy - P',
grepl("MARO", individual.local.identifier) ~ 'Marovitsika - P',
grepl("HAR", individual.local.identifier) ~ 'Nosy Hara - P',
grepl("KEL", individual.local.identifier) ~ 'Angavokely - E',
grepl("LOR", individual.local.identifier) ~ 'Ambositra - E',
grepl("NAT", individual.local.identifier) ~ 'Mangroves - P',
grepl("VHL", individual.local.identifier) ~ 'Vahialava - P',
grepl("KEL", individual.local.identifier) ~ 'Angavokely - E',
grepl("WAY", individual.local.identifier) ~ 'Ankarana - E'))
table(points.df$individual.local.identifier)
# drop any that have less than 5 data points (right now just 1)
points.df <- points.df[!(points.df$individual.local.identifier %in% "LOR002"),]
#--------------------------------------------------------------------------------------------
## DAY VS NIGHT
dusk_hour = 18 # made up
dawn_hour = 5
points.df <- points.df %>%
mutate(daytime = ifelse(hour(timestamp) < dusk_hour & hour(timestamp) > dawn_hour, "day", "night"))
points.df %>%
group_by(individual.taxon.canonical.name)  %>%
count(daytime)
daytime.df <- points.df[, c("individual.local.identifier", "site", "daytime", "location.long", "location.lat")]
# by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime)) +
facet_wrap(individual.local.identifier ~ ., scales = 'free')
# by site
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime)) +
facet_wrap(site ~ ., scales = 'free')
# color by site shape by individual
# could larger daytime movement indicate a more disturbed roost??????!
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime), shape = as.factor(daytime.df$individual.local.identifier)) +
facet_wrap(site ~ ., scales = 'free')
#--------------------------------------------------------------------------------------------
## SEASON
May = 5 # from Andrianiaina et al 2022
October = 10
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) < May | month(timestamp) > October, "wet", "dry"))
points.df %>%  # both species
count(season)
points.df %>%  # by species
group_by(individual.taxon.canonical.name)  %>%
count(season)
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- points.df[!is.na(points.df$location.lat) & !is.na(points.df$location.long),]
# The dataframe should only have 3 columns (x, y, and an identifier) for home ranges
points.sp <- points.df[, c("individual.local.identifier", "location.long", "location.lat")]
# Turn into a spatial points dataframe (class: SpatialPointsDataFrame)
coordinates(points.sp) <- c("location.long", "location.lat")
# Examine the structure of our SpatialPointsDataFrame
str(points.sp)
# Set coordinate system & projection
crs_wgs84 <- CRS(SRS_string = "EPSG:4326") # WGS 84 has EPSG code 4326
class(crs_wgs84)
slot(points.sp, "proj4string") <- crs_wgs84
plot(points.sp, col = as.factor(points.sp@data$individual.local.identifier), pch = 16)
View(points.df)
points.df <- points.df[points.df$individual.taxon.canonical.name == 'Eidolon dupreanum',]
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- points.df[!is.na(points.df$location.lat) & !is.na(points.df$location.long),]
View(points.df)
# The dataframe should only have 3 columns (x, y, and an identifier) for home ranges
points.sp <- points.df[, c("individual.local.identifier", "location.long", "location.lat")]
summary(points.sp)
table(points.df)
table(points.df$individual.local.identifier)
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- points.df[!is.na(points.df$location.lat) & !is.na(points.df$location.long),]
# The dataframe should only have 3 columns (x, y, and an identifier) for home ranges
points.sp <- points.df[, c("individual.local.identifier", "location.long", "location.lat")]
# Turn into a spatial points dataframe (class: SpatialPointsDataFrame)
coordinates(points.sp) <- c("location.long", "location.lat")
# Examine the structure of our SpatialPointsDataFrame
str(points.sp)
# Set coordinate system & projection
crs_wgs84 <- CRS(SRS_string = "EPSG:4326") # WGS 84 has EPSG code 4326
class(crs_wgs84)
slot(points.sp, "proj4string") <- crs_wgs84
plot(points.sp, col = as.factor(points.sp@data$individual.local.identifier), pch = 16)
# Transform the point object (points.sp)
points.sp.geo <- spTransform(points.sp, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs "))
## Satellite imagery
register_google(key = "AIzaSyCwa0OOmg7nRXgOrBZgBxgvmdn1h_bIO7g")
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 6, maptype = 'satellite')
ggmap(mybasemap)
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(id = points.sp.geo@data$individual.local.identifier, # add individual identifier
points.sp.geo@coords) # Add coordinates
# Plot imagery + points + paths
mymap.paths <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(id)), size = 1) +
geom_path(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(id))) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.paths + labs(linetype='Bat ID')
mymap.paths
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 5, maptype = 'satellite')
ggmap(mybasemap)
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 7, maptype = 'satellite')
ggmap(mybasemap)
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 6, maptype = 'satellite')
ggmap(mybasemap)
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(id = points.sp.geo@data$individual.local.identifier, # add individual identifier
points.sp.geo@coords) # Add coordinates
# Plot imagery + points + paths
mymap.paths <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(id)), size = 1) +
geom_path(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(id))) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.paths + labs(linetype='Bat ID')
mymap.paths
# Plot imagery + points + paths
mymap.paths <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = id), size = 1) +
geom_path(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = id)) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.paths + labs(linetype='Bat ID')
# Calculate MCPs for each bat
points.df.mcp <- mcp(points.sp, percent = 95) # after Epstein et al
# Examine output
points.df.mcp
# Plot
plot(points.sp, col = as.factor(points.sp@data$individual.local.identifier), pch = 16)
plot(points.df.mcp, col = alpha(1:7, 0.5), add = TRUE)
# Calculate the MCP by including 50 to 100 percent of points
hrs <- mcp.area(points.sp, percent = seq(50, 100, by = 5))
hrs # examine dataframe
# Transform the point and MCP objects.
points.spgeo <- spTransform(points.sp, CRS("+proj=longlat"))
points.mcpgeo <- spTransform(points.df.mcp, CRS("+proj=longlat"))
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(points.spgeo@coords,
id = points.spgeo@data$individual.local.identifier. )
mymap.hr <- ggmap(mybasemap) +
geom_polygon(data = fortify(points.mcpgeo),
# Polygon layer needs to be "fortified" to add geometry to the dataframe
aes(long, lat, colour = id, fill = id),
alpha = 0.3) + # alpha sets the transparency
geom_point(data = points.geo,
aes(x = coords.x1, y = coords.x2, colour = as.character(id)))  +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
#scale_fill_manual(name = "Bat ID",
#                 values = c("red", "blue", "purple", "green", "orange", "black", "pink", "yellow"),
#                breaks = c("ANA139", "ANA140", "ANA154", "MARO113", "MARO114", "MARO115", "TSI092", "TSI093")) +
#scale_colour_manual(name = "Bat ID",
#                   values = c("red", "blue", "purple", "green", "orange", "black", "pink", "yellow"),
#                  breaks = c("ANA139", "ANA140", "ANA154", "MARO113", "MARO114", "MARO115", "TSI092", "TSI093"))
mymap.hr
Eidolon_roosts <- read.csv("~/Desktop/Eidolon_roosts.csv")
View(Eidolon_roosts)
# export eidolon roosts as shp file
tmp <- Eidolon_roosts
library(dplyr)
View(tmp)
tmp %>%
select(Roost.ID, location.lat, location.long)
tmp <- tmp %>%
select(Roost.ID, location.lat, location.long)
View(tmp)
st_write(tmp, "eidolon_roosts.shp")
library(sf)
st_write(tmp, "eidolon_roosts.shp")
getwd()
rm(list=ls())
library(lubridate)
library(sp)
library(ggmap)
library(adehabitatHR)
library(scales)
library(maptools)
library(ggplot2)
library(ggmap)
library(dplyr)
library(amt)
library(geosphere)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/shorigan/Documents/GitHub/Bat-disease-metapop/bat-disease-metapop/Models/WIP/"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/sophiahorigan/Documents/GitHub/Bat-disease-metapop/bat-disease-metapop/Models/WIP/"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## LOAD DATA
eidolon_roosts.df <- read.csv(paste0(homedir,"Input/Eidolon_roosts.csv"), header = TRUE)
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- eidolon_roosts.df[!is.na(eidolon_roosts.df$location.lat) & !is.na(eidolon_roosts.df$location.long),]
# Subset to relevant columns only
points.sp <- points.df[, c("Roost.ID", "location.long", "location.lat", "Province")]
# Subset to relevant columns only
points.sp <- points.df[, c("Roost.ID", "location.long", "location.lat")]
# Turn into a spatial points dataframe (class: SpatialPointsDataFrame)
coordinates(points.sp) <- c("location.long", "location.lat")
# Examine the structure of our SpatialPointsDataFrame
str(points.sp)
# Set coordinate system & projection
crs_wgs84 <- CRS(SRS_string = "EPSG:4326") # WGS 84 has EPSG code 4326
class(crs_wgs84)
slot(points.sp, "proj4string") <- crs_wgs84
plot(points.sp, col = as.factor(points.sp@data$Province), pch = 16)
plot(points.sp, pch = 16)
# Transform the point object (points.sp)
points.sp.geo <- spTransform(points.sp, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs "))
points.sp
str(points.sp)
writeSpatialShape(points.sp, "eidolon_roosts.shp")
library(maptools)
install.packages("maptools")
