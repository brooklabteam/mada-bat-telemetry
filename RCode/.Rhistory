for(i in 1:length(test.df$Time)){
if(test.df[i,]$Time > "07:00:00" && test.df[i,]$Time < "13:00:00"){
test.df$day = 1
}
else{
test.df$day = 0
}
}
test.df[1,]$Time
as.numeric(test.df[1,]$Time)
strptime(test.df[1,]$Time,"%H:%M:%S")
test.df$Time <- as.POSIXct(test.df$Time, format = "%H:%M:%S")
class(test.df$Time)
for(i in 1:length(test.df$Time)){
if(test.df[i,]$Time > "07:00:00" && test.df[i,]$Time < "13:00:00"){
test.df$day = 1
}
else{
test.df$day = 0
}
}
dawn <- as.POSIXct("07:00:00", format = "%H:%M:%S")
library(lubridate)
# convert timestamp column
(test.df$Time <- mdy_hms(test.df$Time))
# convert timestamp column
(test.df$Time <- ymd_hms(test.df$Time))
# convert timestamp column
(test.df$timestamp <- ymd_hms(test.df$timestamp))
test.df <- read.csv(paste0(homedir,"/input/Movebank-AllTags-AllSensorTypes-06072024.csv"), header = TRUE)
is.na(test.df$timestamp)
count(is.na(test.df$timestamp))
sum(is.na(test.df$timestamp))
# convert timestamp column
(test.df$timestamp <- ymd_hms(test.df$timestamp))
class(test.df$timestamp)
# change time zone to Madagascar
test.df$timestamp <- with_tz(test.df$timestamp, "Madagascar")
grep("Madagascar", OlsonNames(), value=TRUE)
OlsonNames()
# change time zone to Madagascar
test.df$timestamp <- with_tz(test.df$timestamp, "Africa/Addis_Ababa")
#--------------------------------------------------------------------------------------------
## FORMAT FOR SPATIAL ANALYSIS
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- points.df[!is.na(points.df$location.lat) & !is.na(points.df$location.long),]
#--------------------------------------------------------------------------------------------
## LOAD DATA
points.df <- read.csv(paste0(homedir,"/input/Movebank-AllTags-AllSensorTypes-06072024.csv"), header = TRUE)
# The dataframe should only have 3 columns (x, y, and an identifier) for home ranges
points.sp <- points.df[, c("individual.local.identifier", "location.long", "location.lat")]
# Turn into a spatial points dataframe (class: SpatialPointsDataFrame)
library(sp)
# Turn into a spatial points dataframe (class: SpatialPointsDataFrame)
coordinates(points.sp) <- c("location.long", "location.lat")
View(points.sp)
#--------------------------------------------------------------------------------------------
## FORMAT FOR SPATIAL ANALYSIS
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- points.df[!is.na(points.df$location.lat) & !is.na(points.df$location.long),]
# The dataframe should only have 3 columns (x, y, and an identifier) for home ranges
points.sp <- points.df[, c("individual.local.identifier", "location.long", "location.lat")]
View(points.sp)
# Turn into a spatial points dataframe (class: SpatialPointsDataFrame)
coordinates(points.sp) <- c("location.long", "location.lat")
# Examine the structure of our SpatialPointsDataFrame
str(points.sp)
# Set coordinate system & projection
crs_wgs84 <- CRS(SRS_string = "EPSG:4326") # WGS 84 has EPSG code 4326
class(crs_wgs84)
slot(points.sp, "proj4string") <- crs_wgs84
plot(points.sp, col = as.factor(points.sp@data$individual.local.identifier), pch = 16)
# Transform the point object (points.sp)
points.sp.geo <- spTransform(points.sp, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs "))
library(ggmap)
## Satellite imagery
register_google(key = "AIzaSyCwa0OOmg7nRXgOrBZgBxgvmdn1h_bIO7g")
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 9, maptype = 'satellite')
ggmap(mybasemap)
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 2, maptype = 'satellite')
ggmap(mybasemap)
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 5, maptype = 'satellite')
ggmap(mybasemap)
## The location argument can take a vector with latitude and longitude, or a character string.
mybasemap <- get_map(location = c(lon = mean(points.sp@coords[,1]) ,
lat = mean(points.sp@coords[,2])),
source = "google", zoom = 6, maptype = 'satellite')
ggmap(mybasemap)
# Turn the spatial data frame of points into just a dataframe for plotting in ggmap
points.geo <- data.frame(id = points.sp.geo@data$individual.local.identifier, # add individual identifier
points.sp.geo@coords) # Add coordinates
# Plot imagery + points + paths
mymap.paths <-ggmap(mybasemap) +
geom_point(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(id))) +
geom_path(data = points.geo, aes(x = coords.x1, y = coords.x2, colour = as.factor(id))) +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
mymap.paths + labs(linetype='Bat ID')
library(adehabitatHR)
# Calculate MCPs for each turtle
points.df.mcp <- mcp(points.sp, percent = 100)
# Calculate MCPs for each bat
points.df.mcp <- mcp(points.sp, percent = 100)
View(points.sp)
# Examine the structure of our SpatialPointsDataFrame
str(points.sp)
# Only include three columns (id, x, and y coordinates) for making MCP's
points.sp <- points.df[, c("individual.local.identifier", "location.long", "location.lat")]
coordinates(points.sp) <- c("location.long", "location.lat")
# Set coordinate system & projection
crs_wgs84 <- CRS(SRS_string = "EPSG:4326") # WGS 84 has EPSG code 4326
class(crs_wgs84)
slot(points.sp, "proj4string") <- crs_wgs84
# Calculate MCPs for each turtle
points.df.mcp <- mcp(points.sp, percent = 100)
table(points.df$individual.local.identifier)
# drop any that have less than 5 data points
points.df[!(points.df$individual.local.identifier %in% "LOR002"),]
# drop any that have less than 5 data points
points.df <- points.df[!(points.df$individual.local.identifier %in% "LOR002"),]
# counts per bat
table(points.df$individual.local.identifier)
# To format for spatial analyses, we need to remove NA values from the coordinate columns
points.df <- points.df[!is.na(points.df$location.lat) & !is.na(points.df$location.long),]
# The dataframe should only have 3 columns (x, y, and an identifier) for home ranges
points.sp <- points.df[, c("individual.local.identifier", "location.long", "location.lat")]
# Turn into a spatial points dataframe (class: SpatialPointsDataFrame)
coordinates(points.sp) <- c("location.long", "location.lat")
# Examine the structure of our SpatialPointsDataFrame
str(points.sp)
# Set coordinate system & projection
crs_wgs84 <- CRS(SRS_string = "EPSG:4326") # WGS 84 has EPSG code 4326
class(crs_wgs84)
slot(points.sp, "proj4string") <- crs_wgs84
# Calculate MCPs for each bat with more than 5 relocations
points.df.mcp <- mcp(points.sp, percent = 100)
# Examine output
points.df.mcp
library(scales)
# Plot
plot(points.sp, col = as.factor(points.sp@data$individual.local.identifier), pch = 16)
plot(points.df.mcp, col = alpha(1:7, 0.5), add = TRUE)
# Calculate the MCP by including 50 to 100 percent of points
hrs <- mcp.area(points.sp, percent = seq(50, 100, by = 5))
hrs # examine dataframe
# Transform the point and MCP objects.
points.spgeo <- spTransform(points.sp, CRS("+proj=longlat"))
points.mcpgeo <- spTransform(points.df.mcp, CRS("+proj=longlat"))
library(maptools)
# plot on google map
register_google(key = "AIzaSyCwa0OOmg7nRXgOrBZgBxgvmdn1h_bIO7g")
mybasemap <- get_map(location = c(lon = mean(points.spgeo@coords[,1]),
lat = mean(points.spgeo@coords[,2])),
source = "google",
zoom = 9,
maptype = 'satellite')
mybasemap <- get_map(location = c(lon = mean(points.spgeo@coords[,1]),
lat = mean(points.spgeo@coords[,2])),
source = "google",
zoom = 6,
maptype = 'satellite')
mymap.hr <- ggmap(mybasemap) +
geom_polygon(data = fortify(points.mcpgeo),
# Polygon layer needs to be "fortified" to add geometry to the dataframe
aes(long, lat, colour = id, fill = id),
alpha = 0.3) + # alpha sets the transparency
geom_point(data = points.geo,
aes(x = coords.x1, y = coords.x2, colour = as.character(id)))  +
theme(legend.position = c(0.15, 0.80)) +
labs(x = "Longitude", y = "Latitude")
#scale_fill_manual(name = "Bat ID",
#                 values = c("red", "blue", "purple", "green", "orange", "black", "pink", "yellow"),
#                breaks = c("ANA139", "ANA140", "ANA154", "MARO113", "MARO114", "MARO115", "TSI092", "TSI093")) +
#scale_colour_manual(name = "Bat ID",
#                   values = c("red", "blue", "purple", "green", "orange", "black", "pink", "yellow"),
#                  breaks = c("ANA139", "ANA140", "ANA154", "MARO113", "MARO114", "MARO115", "TSI092", "TSI093"))
mymap.hr
kernel.ref <- kernelUD(points.sp, h = "href")  # href = the reference bandwidth
image(kernel.ref) # plot
kernel.ref[[1]]@h # The smoothing factor is stored for each animal in the "h" slot
kernel.lscv <- kernelUD(points.sp, h = "LSCV") # Least square cross validation smoothing
image(kernel.lscv) # plot
plotLSCV(kernel.lscv) # Look for a dip
points.kernel.poly.95 <- getverticeshr(kernel.ref, percent = 95)
points.kernel.poly.50 <- getverticeshr(kernel.ref, percent = 50)
print(points.kernel.poly)  # returns the area of each polygon
print(points.kernel.poly.50)  # returns the area of each polygon
plot(points.kernel.poly.50, col = as.factor(points.kernel.poly.50@data$id))
View(points.geo)
# add column for daytime or nighttime
dusk_hour = 18:00
dawn_hour = 5:00
hour(points.df$timestamp)
library(lubridate)
library(sp)
library(ggmap)
library(adehabitatHR)
library(scales)
library(maptools)
library(ggplot2)
library(ggmap)
hour(points.df$timestamp)
month(points.df$timestamp)
mutate(daytime = ifelse(hour(points.df$timestamp) < dusk_hour & hour(points.df$timestamp) > dawn_hour, "day", "night"))
library(dplyr)
mutate(daytime = ifelse(hour(points.df$timestamp) < dusk_hour & hour(points.df$timestamp) > dawn_hour, "day", "night"))
# add column for daytime or nighttime
dusk_hour = 18
dawn_hour = 5
mutate(daytime = ifelse(hour(points.df$timestamp) < dusk_hour & hour(points.df$timestamp) > dawn_hour, "day", "night"))
class(hour(points.df$timestamp))
points.df %>%
select(timestamp) %>%
mutate(daytime = ifelse(hour(timestamp) < dusk_hour & hour(timestamp) > dawn_hour, "day", "night"))
View(points.df)
points.df %>%
mutate(daytime = ifelse(hour(timestamp) < dusk_hour & hour(timestamp) > dawn_hour, "day", "night"))
View(points.df)
points.df <- points.df %>%
mutate(daytime = ifelse(hour(timestamp) < dusk_hour & hour(timestamp) > dawn_hour, "day", "night"))
View(points.df)
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) <= May & month(timestamp) >= October, "rainy", "dry"))
# add column for season
# from Andrianiaina et al 2022
# mangoro river valley
May = 5
October = 10
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) <= May & month(timestamp) >= October, "rainy", "dry"))
# representation from rainy vs dry
hist(points.df$season)
# representation from rainy vs dry
hist(count(points.df$season))
# representation from rainy vs dry
points.df %>%
count(season)
points.df %>%
count(daytime)
View(points.df)
month(timestamp)
hour(timestamp)
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) < May & month(timestamp) > October, "wet", "dry"))
# add column for season
# from Andrianiaina et al 2022
# mangoro river valley
May = 5
October = 10
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) < May & month(timestamp) > October, "wet", "dry"))
points.df %>%
count(season)
month(points.df$timestamp)
points.df %>%
count(month(timestamp))
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) < 5 & month(timestamp) > 10, "wet", "dry"))
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) < 5 || month(timestamp) > 10, "wet", "dry"))
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) < 5 | month(timestamp) > 10, "wet", "dry"))
points.df %>%
count(season)
points.df %>%  # by species
group_by(individual.taxon.canonical.name)  %>%
count(season)
points.df %>%
group_by(individual.taxon.canonical.name)  %>%
count(month(timestamp)) # by species
points.df %>%  # by species
group_by(individual.taxon.canonical.name)  %>%
count(season)
points.df %>%
group_by(individual.taxon.canonical.name)  %>%
count(daytime)
# counts per bat
table(points.df$individual.local.identifier)
daytime.df <- points.df[, c("individual.local.identifier", "daytime", "location.long", "location.lat")]
View(daytime.df)
ggplot(data = daytime.df, aes(location.long, location.lat))
ggplot(data = daytime.df, aes(location.long, location.lat), pch = 16)
ggplot(data = daytime.df, aes(location.long, location.lat), pch = 16) + geom_point()
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point() +
plot(points.df, col = as.factor(points.sp@data$individual.local.identifier), pch = 16)
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point()
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime))
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_grid(individual.local.identifier ~ .)
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_wrap(individual.local.identifier ~ .)
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_wrap(individual.local.identifier ~ ., scales = 'free')
# This script takes in MoveBank telemetry downloads, cleans and preps, then generates figures
rm(list=ls())
library(lubridate)
library(sp)
library(ggmap)
library(adehabitatHR)
library(scales)
library(maptools)
library(ggplot2)
library(ggmap)
library(dplyr)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/sophiahorigan/Documents/GitHub/mada-bat-telemetry/RCode"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## SET WD
homedir <- "/Users/shorigan/Documents/GitHub/mada-bat-telemetry/RCode"
setwd(homedir)
#--------------------------------------------------------------------------------------------
## LOAD DATA
points.df <- read.csv(paste0(homedir,"/input/Movebank-AllTags-AllSensorTypes-06072024.csv"), header = TRUE)
# convert timestamp column
points.df$timestamp <- ymd_hms(points.df$timestamp)
View(points.df)
# change time zone to Madagascar
points.df$timestamp <- with_tz(points.df$timestamp, "Africa/Addis_Ababa")
# DAY VS NIGHT
dusk_hour = 18 # made up
dawn_hour = 5
points.df <- points.df %>%
mutate(daytime = ifelse(hour(timestamp) < dusk_hour & hour(timestamp) > dawn_hour, "day", "night"))
points.df %>%
group_by(individual.taxon.canonical.name)  %>%
count(daytime)
daytime.df <- points.df[, c("individual.local.identifier", "daytime", "location.long", "location.lat")]
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_wrap(individual.local.identifier ~ ., scales = 'free')
season.df <- points.df[, c("individual.local.identifier", "season", "location.long", "location.lat")]
# SEASON
May = 5 # from Andrianiaina et al 2022
October = 10
points.df <- points.df %>%
mutate(season = ifelse(month(timestamp) < May | month(timestamp) > October, "wet", "dry"))
points.df %>%  # both species
count(season)
points.df %>%  # by species
group_by(individual.taxon.canonical.name)  %>%
count(season)
season.df <- points.df[, c("individual.local.identifier", "season", "location.long", "location.lat")]
ggplot(data = season.df, aes(location.long, location.lat)) +
geom_point(aes(colour=season)) +
facet_wrap(individual.local.identifier ~ ., scales = 'free')
# DAY VS NIGHT
dusk_hour = 18 # made up
dawn_hour = 5
points.df <- points.df %>%
mutate(daytime = ifelse(hour(timestamp) < dusk_hour & hour(timestamp) > dawn_hour, "day", "night"))
points.df %>%
group_by(individual.taxon.canonical.name)  %>%
count(daytime)
daytime.df <- points.df[, c("individual.local.identifier", "daytime", "location.long", "location.lat")]
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_wrap(individual.local.identifier ~ ., scales = 'free')
# grouped by site
points.df <- points.df %>%
mutate(site = case_when(grepl("MAN", individual.taxon.canonical.name) ~ 'Ambositra - P',
grepl("ANA", individual.taxon.canonical.name) ~ 'Analambotaka - P',
grepl("TSI", individual.taxon.canonical.name) ~ 'Marotsipohy - P',
grepl("MARO", individual.taxon.canonical.name) ~ 'Marovitsika - P',
grepl("HAR", individual.taxon.canonical.name) ~ 'Nosy Hara - P',
grepl("KEL", individual.taxon.canonical.name) ~ 'Angavokely - E',
grepl("LOR", individual.taxon.canonical.name) ~ 'Ambositra - E',
grepl("NAT", individual.taxon.canonical.name) ~ 'Mangroves - P',
grepl("VHL", individual.taxon.canonical.name) ~ 'Vahialava - P',
grepl("KEL", individual.taxon.canonical.name) ~ 'Angavokely - E'))
# grouped by site
points.df <- points.df %>%
mutate(site = case_when(grepl("MAN", individual.local.identifier) ~ 'Ambositra - P',
grepl("ANA", individual.local.identifier) ~ 'Analambotaka - P',
grepl("TSI", individual.local.identifier) ~ 'Marotsipohy - P',
grepl("MARO", individual.local.identifier) ~ 'Marovitsika - P',
grepl("HAR", individual.local.identifier) ~ 'Nosy Hara - P',
grepl("KEL", individual.local.identifier) ~ 'Angavokely - E',
grepl("LOR", individual.local.identifier) ~ 'Ambositra - E',
grepl("NAT", individual.local.identifier) ~ 'Mangroves - P',
grepl("VHL", individual.local.identifier) ~ 'Vahialava - P',
grepl("KEL", individual.local.identifier) ~ 'Angavokely - E'))
View(season.df)
season.df <- points.df[, c("individual.local.identifier", "site", "season", "location.long", "location.lat")]
View(season.df)
# by site
ggplot(data = season.df, aes(location.long, location.lat)) +
geom_point(aes(colour=season)) +
facet_wrap(site ~ ., scales = 'free')
# DAY VS NIGHT
dusk_hour = 18 # made up
dawn_hour = 5
points.df <- points.df %>%
mutate(daytime = ifelse(hour(timestamp) < dusk_hour & hour(timestamp) > dawn_hour, "day", "night"))
points.df %>%
group_by(individual.taxon.canonical.name)  %>%
count(daytime)
daytime.df <- points.df[, c("individual.local.identifier", "daytime", "location.long", "location.lat")]
# by site
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_wrap(individual.local.identifier ~ ., scales = 'free')
# by site
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_wrap(site ~ ., scales = 'free')
daytime.df <- points.df[, c("individual.local.identifier", "site", "daytime", "location.long", "location.lat")]
# by site
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_wrap(site ~ ., scales = 'free')
points.df <- points.df %>%
mutate(site = case_when(grepl("MAN", individual.local.identifier) ~ 'Ambositra - P',
grepl("ANA", individual.local.identifier) ~ 'Analambotaka - P',
grepl("TSI", individual.local.identifier) ~ 'Marotsipohy - P',
grepl("MARO", individual.local.identifier) ~ 'Marovitsika - P',
grepl("HAR", individual.local.identifier) ~ 'Nosy Hara - P',
grepl("KEL", individual.local.identifier) ~ 'Angavokely - E',
grepl("LOR", individual.local.identifier) ~ 'Ambositra - E',
grepl("NAT", individual.local.identifier) ~ 'Mangroves - P',
grepl("VHL", individual.local.identifier) ~ 'Vahialava - P',
grepl("KEL", individual.local.identifier) ~ 'Angavokely - E',
grepl("WAY", individual.local.identifier) ~ 'Ankarana - E'))
points.df <- points.df %>%
mutate(daytime = ifelse(hour(timestamp) < dusk_hour & hour(timestamp) > dawn_hour, "day", "night"))
points.df %>%
group_by(individual.taxon.canonical.name)  %>%
count(daytime)
daytime.df <- points.df[, c("individual.local.identifier", "site", "daytime", "location.long", "location.lat")]
# by site
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour=daytime)) +
facet_wrap(site ~ ., scales = 'free')
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime), shape = individual.local.identifier) +
facet_wrap(site ~ ., scales = 'free')
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime), shape = individual.local.identifier) +
facet_wrap(site ~ ., scales = 'free')
View(daytime.df)
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime), shape = daytime.df$individual.local.identifier) +
facet_wrap(site ~ ., scales = 'free')
View(points.df)
View(daytime.df)
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat, colour = daytime, shape = ), shape = individual.local.identifier) +
geom_point() +
facet_wrap(site ~ ., scales = 'free')
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat, colour = daytime, shape = individual.local.identifier) +
geom_point() +
facet_wrap(site ~ ., scales = 'free'))
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat, colour = daytime, shape = individual.local.identifier) +
geom_point(aes(shape=NULL)) +
facet_wrap(site ~ ., scales = 'free'))
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime), shape = daytime.df$individual.local.identifier) +
facet_wrap(site ~ ., scales = 'free')
# drop any that have less than 5 data points (right now just 1)
points.df <- points.df[!(points.df$individual.local.identifier %in% "LOR002"),]
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime), shape = daytime.df$individual.local.identifier) +
facet_wrap(site ~ ., scales = 'free')
daytime.df <- points.df[, c("individual.local.identifier", "site", "daytime", "location.long", "location.lat")]
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime), shape = daytime.df$individual.local.identifier) +
facet_wrap(site ~ ., scales = 'free')
View(daytime.df)
# color by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime), shape = as.factor(daytime.df$individual.local.identifier)) +
facet_wrap(site ~ ., scales = 'free')
season.df <- points.df[, c("individual.local.identifier", "site", "season", "location.long", "location.lat")]
View(season.df)
# by site
ggplot(data = season.df, aes(location.long, location.lat)) +
geom_point(aes(colour=season)) +
facet_wrap(site ~ ., scales = 'free')
# group by site shape by individual
ggplot(data = daytime.df, aes(location.long, location.lat)) +
geom_point(aes(colour = daytime) shape = as.factor(individual.local.identifier)) +
# group by site shape by individual
ggplot(data = season.df, aes(location.long, location.lat)) +
geom_point(aes(colour = season) shape = as.factor(season.dfindividual.local.identifier)) +
# group by site shape by individual
ggplot(data = season.df, aes(location.long, location.lat)) +
geom_point(aes(colour = season), shape = as.factor(season.df$individual.local.identifier)) +
facet_wrap(site ~ ., scales = 'free')
